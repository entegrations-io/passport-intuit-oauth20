// Load modules.
const OAuth2Strategy = require('passport-oauth2')
  , util = require('util')
  , InternalOAuthError = require('passport-oauth2').InternalOAuthError
  , { v4: uuidv4 } = require('uuid');


/**
 * `Strategy` constructor.
 *
 * The Intuit authentication strategy authenticates requests by delegating to
 * Intuit using the OAuth 2.0 protocol.
 *
 * Applications must supply a `verify` callback which accepts an `accessToken`,
 * `refreshToken` and service-specific `profile`, and then calls the `done`
 * callback supplying a `user`, which should be set to `false` if the
 * credentials are not valid.  If an exception occurred, `err` should be set.
 *
 * Options:
 *   - `clientId`      	Mandatory. Your Intuit application's client id
 *   - `clientSecret`  	Mandatory. Your Intuit application's client secret
 *   - `callbackURL`   	Mandatory. URL to which Intuit will redirect the user after granting authorization
 *   - `grantType`		Optional. Must be authorization_code.
 *   - `scope`          Optional. Scope. Default is MERCHANT_PROFILE_READ.
 *   - `stateFunc`      Optional. Pass a function that can generate state param. Defaults to a value generated by uuidv4
 *
 * Examples:
 *
 *     passport.use(new IntuitStrategy({
 *         clientId: '123-456-789',
 *         clientSecret: 'shhh-its-a-secret'
 *         callbackURL: 'https://www.example.net/auth/Intuit/callback'
 *       },
 *       function(accessToken, refreshToken, profile, done) {
 *         User.findOrCreate(..., function (err, user) {
 *           done(err, user);
 *         });
 *       }
 *     ));
 *
 * @param {Object} options
 * @param {Function} verify
 * @api public
 */
function Strategy(options, verify) {
  options = Object.assign({}, options);
  // TODO live/sandbox flag
  // https://developer.intuit.com/app/developer/qbo/docs/develop/authentication-and-authorization/oauth-2.0
  options.authorizationURL = options.authorizationURL || 'https://appcenter.intuit.com/connect/oauth2'
  options.tokenURL = options.tokenURL || 'https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer';
  options.profileURL = options.profileURL || 'https://accounts.platform.intuit.com/v1/openid_connect/userinfo';
  options.scope = options.scope || 'openid profile email';
  options.scopeSeparator = options.scopeSeparator || ',';
  options.grant_type = options.grantType || 'authorization_code';

  options.stateFunc = options.stateFunc || uuidv4;

  OAuth2Strategy.call(this, options, verify);
  this.name = 'intuit';
  this.options = options;
}

// Inherit from `OAuth2Strategy`.
util.inherits(Strategy, OAuth2Strategy);



/**
 * Retrieve user profile from Intuit.
 *
 * This function constructs a normalized profile, with the following properties:
 *
 *   - `provider`         always set to `intuit`
 *   - `id`
 *   - `displayName`
 *   - `businessName`
 *   - `mainLocationId`
 *
 * @param {String} accessToken
 * @param {Function} done
 * @api protected
 */
Strategy.prototype.userProfile = function(accessToken, done) {
  const self = this;
  const authorization = 'Bearer ' + accessToken;
  const headers = {
    'Authorization' : authorization
  };
  this._oauth2._request('GET', this.options.profileURL, headers, '', '', function(err, body, res) {
    if (err) {
      return done(new InternalOAuthError('failed to fetch user profile', err));
    }

    try {
      const intuitAccount = JSON.parse(body);
      const profile = {
        provider: 'intuit',
        id: intuitAccount.sub,
        displayName: intuitAccount.givenName + ' ' + intuitAccount.familyName,
        email : intuitAccount.email,
        _intuitProfile: intuitAccount
      };

      profile._rawBody = body;
      profile._jsonBody = JSON.parse(body);

      done(null, profile);
    } catch (e) {
      done(e);
    }
  });
};

/**
 * Return any extra Intuit-specific parameters to be included in the authorization
 * request.
 *
 * @param {object} options
 * @return {object}
 * @access protected
 */
Strategy.prototype.authorizationParams = function(options) {
  const params = {};
  if (this.options.stateFunc && typeof this.options.stateFunc === 'function') {
    params.state = this.options.stateFunc();
  } else {
    params.state = uuidv4();
  }
  return params;
}


/**
 * Expose `Strategy`.
 */
module.exports = Strategy;
